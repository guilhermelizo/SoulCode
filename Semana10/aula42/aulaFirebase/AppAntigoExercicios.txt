import React, {useEffect, useState} from 'react';
import firebase from './firebase';
import { Button, Text } from 'react-native';

export default function App() {
  const [state, setState] = useState ([]);
  useEffect (
    () => {
      // pegaDados();
      // getProdutos();
      // getProdutoId();
      // getProdutosStatus();
      // getProdutosDep();
      // getProdutosPreco();

      // inserirUser();
      // editarUser();
    },[]
  ) 
  
  // ADD -  Como inserir dados na coleção (no caso, um usuário)
    const inserirUser = async () =>{
      await firebase.db.collection('users').add({
        nome: 'Jeremyah',
        email: 'j@j.com'
      }).then(   // Se der tudo certo, ele ativa o Then
        () => alert('salve geral')
        ).catch( // Se houver algum erro, ele irá para o catch
          () => alert('não foi possivel inserir')
        )
    } 

    // EDITAR - para editar a chave do ID deve ser IDENTICA a da registrada no Banco de Dados
    const editarUser = async () =>{
      const users = firebase.db.collection('users');
      
      await users.doc('9krpPsgXnzeWfaRyqHs4').update({
        nome: 'Jerejhones travolta'
      }).then(
        ()=>alert("Editado")
      ).catch(
        ()=>alert("Não funfo")
      )
    }

    // DELETAR - pela referência do ID do documento (SEMPRE PELO ID, SEMPRE!!!)
    const deletarUser = async () => {
      const users = firebase.db.collection('users');

      await users.doc('3FGvs6lvhNAMpwcYQqpd').delete()
      .then(
        () => alert ("Deletado")
      ).catch(
        () => alert("Não encontrado")
      )
      
    }



  // Busca de users
  const pegaDados = async () => {
    const users = firebase.db.collection('users');
    const querySnapshot = await users.get();
    //Constante criada para esperar do users o get de todos os elementos
    const dados = querySnapshot.docs;
    //dados receberá o querySnapShot de forma alinhada pelo .docs
    dados.forEach(
      doc => console.log(doc.data())
      //pega cada elemento e trás extraído de forma individual
      //o .data é o que transforma o array da resposta em dados visuais
    )
  }
  
  console.log(state);

  const pegaDadosQuando = async () => {
    const users = firebase.db.collection('users');
    const reposta = await users.where('nome', '=', 'Filipe').get();
    resposta.forEach(
      user => console.log(user.data())
      )
    }
    
    const pegaDadosPorId = async () => {
      const users = firebase.db.collection('users');
      const resposta = await users.doc("1MQwmm9NdyblRXO7Leyj").get();
      console.log(resposta.data());
    }
    
    // Resoluções atividade:
    //  * 1 - receber todos os produtos. >>>>> (usar o .doc)
    const getProdutos = async () => {
      const produtos = firebase.db.collection('produtos')
      const resposta = await produtos.get();
      resposta.forEach(
        doc => console.log(doc.data()) 
      )
    }

  //  * 2 - receber produto pelo id. >>>>> (usar o .get)
  const getProdutoId = async () => {
    const produtos = firebase.db.collection("produtos");
    const resposta = await produtos.doc('EJOtOmEyLoFlMYb7rwJN').get();
    console.log(resposta.data());
  }

  //  * 3 - receber produtos com status igual off
  const getProdutosStatus = async () => {
    const produtos = firebase.db.collection("produtos");
    const resposta = await produtos.where('status', '==', 'off').get();
    resposta.forEach(
      doc => console.log(doc.data())
    )
  }

  //  * 4 - receber produtos com departamento igual a eletronicos.
  const getProdutosDep = async () => {
    const produtos = firebase.db.collection("produtos");
    const resposta = await produtos.where('departamento', '==', 'eletronicos').get();
    resposta.forEach(
      doc => console.log(doc.data())
    )
  }

  //  * 5 - receber produtos com preco acima de 50 pilas. >>>>> (where)
  const getProdutosPreco = async () => {
    const produtos = firebase.db.collection("produtos");
    const resposta = await produtos.where('preco', '>' , 50).get();
    resposta.forEach(
      doc => console.log(doc.data())
    )
  }

    // ATIVIDADE 2 *************************************************
    // ADD - INSERIR <<<<<<<<<<<<<<<<<<
    const inserirProduto = async () =>{
      await firebase.db.collection('produtos').add({
        nome: 'Produto adicionado',
        preco: 9999999,
        status: 'on',
        fabricante: 'soulcode',
        departamento: 'eletronicos'
      }).then(   // Se der tudo certo, ele ativa o Then
        () => alert('Produto salvo!')
        ).catch( // Se houver algum erro, ele irá para o catch
          () => alert('não foi possivel inserir')
        )
    }
    // EDITAR <<<<<<<<<<<<<<<<<<
    const editarProduto = async () =>{
      const produtos = firebase.db.collection('produtos');
      
      await produtos.doc('49wZxdh44z65Y2c0j7UW').update({
        nome: 'Produto EDITADO',
        preco: 16749,
        status: 'on',
        fabricante: 'editedson',
        departamento: 'eletronicos'
      }).then(
        ()=>alert("O produto foi editado!")
      ).catch(
        ()=>alert("Não funfo")
      )
    }

    // DELETAR <<<<<<<<<<<<<<<<<<
    const deletarProduto = async () => {
      const produtos = firebase.db.collection('produtos');

      await produtos.doc('IpDFHwduriSO6C28jKSM').delete()
      .then(
        () => alert ("Produto Deletado!")
      ).catch(
        () => alert("Não encontrado")
      )
      
    }

  return (
    < >
      <Text> Ações do Usuário </Text>
      <Button title='Add' onPress={inserirUser} />
      <Button title='Editar' onPress={editarUser} />
      <Button title='Deletar' onPress={deletarUser} />

      <Text>Atividade 2 - Realizar as operações de Inserir, Editar e Deletar para Produtos</Text>
      <Button title='Add produto' onPress={inserirProduto} />
      <Button title='Editar produto' onPress={editarProduto} />
      <Button title='Deletar produto' onPress={deletarProduto} />
    </>
  );
}

// Atividade 2
// Realizar as operações de Inserir, Editar e Deletar em cima da nova coleção criada de 'Produtos' criado na atividade anterior


// ATIVIDADE

// No Cloud Firestore crie uma coleção chamada produtos.
//  * Cada documento deverá ter as seguintes propriedades e seus valores:
//  * nome, preco, departamento(eletronicos, moveis, alimentacao e automotivo), status (on / off) e fabricante 
//  * crie 10 documentos com valores aleatórios para cada produto que 
//  * pertençam aos departamentos descritos.
//  * 
//  * crie funções de busca de acordo com o que se pede:
//  * 
//  * 1 - receber todos os produtos. >>>>> (usar o .doc)
//  * 2 - receber produto pelo id. >>>>> (usar o .get)
//  * 3 - receber produtos com status igual off >>>>> (where)
//  * 4 - receber produtos com departamento igual a eletronicos. >>>>> (where)
//  * 5 - receber produtos com preco acima de 50 pilas. >>>>> (where)



